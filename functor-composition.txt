--- (.) :: (b -> c) -> (a -> b) -> a -> c
--- 
--- fmap :: Functor f => (a -> b) -> f a -> f b
--- 
--- fmap . fmap :: (Functor f, Functor g) => (a -> b) -> g (f a) -> g (f b)
--- 
--- fmap . fmap . fmap :: (Functor f, Functor g, Functor h) => (a -> b) -> h (g (f a)) -> h (g (f b))


(.) :: (y -> z) -> (x -> y) -> x -> z

fmapF :: Functor f => (a -> b) -> (f a -> f b)
fmapG :: Functor g => (p -> q) -> (g p -> g q)

fmapG . fmapF :: (Functor f, Functor g) => (a -> b) -> g (f a) -> g (f b)

--- (Functor f, Functor g) => ((f a -> f b) -> (g p -> g q)) -> ((a -> b) -> (f a -> f b)) -> (a -> b) -> (g p -> g q)

--- x      :: (a -> b)
--- y      :: (f a -> f b)
--- z      :: (g p -> g q)

--- y -> z :: fmapG
--- x -> y :: fmapF

--- p = f a
--- q = f b

Prelude> let fmapF :: (a -> b) -> ([a] -> [b]) ; fmapF = fmap
Prelude> let fmapG :: (p -> q) -> (Maybe p -> Maybe q); fmapG = fmap

Prelude> let fmapGF = (fmapG . fmapF)
Prelude> :t fmapGF
fmapGF :: (a -> b) -> Maybe [a] -> Maybe [b]

Prelude> fmapGF (+1) (Nothing)
Nothing
Prelude> fmapGF (+1) (Just [])
Just []
Prelude> fmapGF (+1) (Just [4, 5])
Just [5,6]
